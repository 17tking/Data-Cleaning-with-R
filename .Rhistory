item_update()
# ppu function 1
ppu_update1 <- function(cafe_data) {
cafe_data <- cafe_data %>%
mutate(price_per_unit = case_when(
is.na(price_per_unit) ~ total_spent / Quantity,
price_per_unit ~ total_spent / Quantity,
TRUE ~ Quantity))
}
#
# we will add them in reverse order
cafe_data_cleaned <- cafe_data %>%
totspent_update() %>%
ppu_update2() %>%
ppu_update1() %>%
quant_update() %>%
item_update()
# ppu function 1
ppu_update1 <- function(cafe_data) {
cafe_data <- cafe_data %>%
mutate(price_per_unit = case_when(
is.na(price_per_unit) ~ total_spent / Quantity,
TRUE ~ Quantity))
}
#
# we will add them in reverse order
cafe_data_cleaned <- cafe_data %>%
totspent_update() %>%
ppu_update2() %>%
ppu_update1() %>%
quant_update() %>%
item_update()
#
# Creating a function like the last column. This will be calculated by dividing
# total_spent by price_per_unit.
quant_update <- function(cafe_data) {
cafe_data %>%
mutate(Quantity = case_when(
is.na(Quantity) ~ total_spent / price_per_unit,
TRUE ~ Quantity))
}
#
# we will add them in reverse order
cafe_data_cleaned <- cafe_data %>%
totspent_update() %>%
ppu_update2() %>%
ppu_update1() %>%
quant_update() %>%
item_update()
#
# looks like we can still fill in more missing data now that we have more info
cafe_data_cleaned <- cafe_data_cleaned %>%
ppu_update2() %>%
quant_update() %>%
totspent_update()
# calculate missing data now
missing_proportion_cleaned <- cafe_data_cleaned %>%
summarise(across(everything(), ~ mean(is.na(.))))
print(missing_proportion_cleaned)
# overall percentage missing
overall_missing_proportion_cleaned <- mean(is.na(cafe_data_cleaned))
print(overall_missing_proportion_cleaned) #10.2% of all data is missing
View(missing_proportion_cleaned)
# COLUMN 6
# 32% of payment_method data is missing. We will fill in the  NAs with 'Unknown'
cafe_data_cleaned <- cafe_data_cleaned %>%
mutate(payment_method = case_when(
is.na(payment_method) ~ 'Unknown',
TRUE = payment_method))
# COLUMN 6
# 32% of payment_method data is missing. We will fill in the  NAs with 'Unknown'
cafe_data_cleaned <- cafe_data_cleaned %>%
mutate(payment_method = case_when(
is.na(payment_method) ~ 'Unknown',
TRUE ~ payment_method))
# COLUMN 7: Location
cafe_data_cleaned <- cafe_data_cleaned %>%
mutate(Location = case_when(
is.na(Location) ~ 'Unknown',
TRUE ~ Location))
View(cafe_data_cleaned)
View(cafe_data_cleaned)
# Final % of missing data
missing_proportion_cleaned <- cafe_data_cleaned %>%
summarise(across(everything(), ~ mean(is.na(.))))
print(missing_proportion_cleaned)
# overall percentage missing
overall_missing_proportion_cleaned <- mean(is.na(cafe_data_cleaned))
print(overall_missing_proportion_cleaned) #10.2% of all data is missing
# overall percentage missing
overall_missing_proportion_cleaned <- sum(is.na(cafe_data_cleaned))
print(overall_missing_proportion_cleaned) #1.3% of all data is missing. NICE!
# overall percentage missing
overall_missing_proportion_cleaned <- (sum(is.na(cafe_data_cleaned))/9841)*100
print(overall_missing_proportion_cleaned) #1.3% of all data is missing. NICE!
# overall percentage missing
overall_missing_proportion_cleaned <- (sum(is.na(cafe_data_cleaned))/10000)*100
print(overall_missing_proportion_cleaned) #1.3% of all data is missing. NICE!
View(cafe_data_cleaned)
# Final % of missing data
missing_proportion_cleaned <- cafe_data_cleaned %>%
summarise(across(everything(), ~ (sum(is.na(.))))/10000)*100
print(missing_proportion_cleaned)
# overall percentage missing
overall_missing_proportion_cleaned <- (sum(is.na(cafe_data_cleaned))/10000)*100
print(overall_missing_proportion_cleaned) #1.3% of all data is missing. NICE!
# Load Packages
library(tidyverse)
# Read in Data and Label 'NAs' from directory
cafe_data <- read_csv("R/2025_03_01_Data_Cleaning_ProjectR/dirty_cafe_sales.csv",
na = c("", "ERROR", "UNKNOWN")) # our three types of NA data
# UPDATING THE DATA SET
#
# Now that we have all of our functions ready for our first 5 columns (ones
# that all needed some sort of calculation to fill in the NAs), we can update it
# here and then see how we can clean the last three columns' NAs.
#
# First I want to see the proportion of missing data by each column
missing_proportion <- cafe_data %>%
summarise(across(everything(), ~ (sum(is.na(.))))/10000)*100
print(missing_proportion)
# overall percentage missing
overall_missing_proportion<- (sum(is.na(cafe_data))/10000)*100
print(overall_missing_proportion) #12.6% of all data is missing
# overall percentage missing
overall_missing_proportion<- (sum(is.na(cafe_data))/8)*100
print(overall_missing_proportion) #12.6% of all data is missing
# calculate missing data now
missing_proportion_cleaned <- cafe_data_cleaned %>%
summarise(across(everything(), ~ (sum(is.na(.))))/10000)*100
print(missing_proportion_cleaned)
# overall percentage missing
overall_missing_proportion_cleaned <- (sum(is.na(cafe_data_cleaned))/10000)*100
print(overall_missing_proportion_cleaned) #10.2% of all data is missing
# UPDATING THE DATA SET
#
# Now that we have all of our functions ready for our first 5 columns (ones
# that all needed some sort of calculation to fill in the NAs), we can update it
# here and then see how we can clean the last three columns' NAs.
#
# First I want to see the proportion of missing data by each column
missing_proportion <- cafe_data %>%
summarise(across(everything(), ~ (sum(is.na(.))))/10000)*100
print(missing_proportion)
# overall percentage missing
overall_missing_proportion<- (sum(is.na(cafe_data))/10000)*100
print(overall_missing_proportion) #12.6% of all data is missing
# UPDATING THE DATA SET
#
# Now that we have all of our functions ready for our first 5 columns (ones
# that all needed some sort of calculation to fill in the NAs), we can update it
# here and then see how we can clean the last three columns' NAs.
#
# First I want to see the proportion of missing data by each column
missing_proportion <- cafe_data %>%
summarise(across(everything(), ~ (sum(is.na(.))/ n())/ * 100))
# UPDATING THE DATA SET
#
# Now that we have all of our functions ready for our first 5 columns (ones
# that all needed some sort of calculation to fill in the NAs), we can update it
# here and then see how we can clean the last three columns' NAs.
#
# First I want to see the proportion of missing data by each column
missing_proportion <- cafe_data %>%
summarise(across(everything(), ~ (sum(is.na(.)) / n()) * 100))
print(missing_proportion)
# overall percentage missing
overall_missing_proportion<- (sum(is.na(cafe_data)) / (nrow(cafe_data) * ncol(cafe_data))) * 100
print(overall_missing_proportion) #12.6% of all data is missing
# UPDATING THE DATA SET
#
# Now that we have all of our functions ready for our first 5 columns (ones
# that all needed some sort of calculation to fill in the NAs), we can update it
# here and then see how we can clean the last three columns' NAs.
#
# First I want to see the proportion of missing data by each column
missing_proportion <- cafe_data %>%
summarise(across(everything(), ~ (sum(is.na(.)) / n()) * 100))
print(missing_proportion)
# UPDATING THE DATA SET
#
# Now that we have all of our functions ready for our first 5 columns (ones
# that all needed some sort of calculation to fill in the NAs), we can update it
# here and then see how we can clean the last three columns' NAs.
#
# First I want to see the proportion of missing data by each column
missing_proportion <- sum(is.na(cafe_data))
print(missing_proportion)
# UPDATING THE DATA SET
#
# Now that we have all of our functions ready for our first 5 columns (ones
# that all needed some sort of calculation to fill in the NAs), we can update it
# here and then see how we can clean the last three columns' NAs.
#
# First I want to see the proportion of missing data by each column
total_cells <- prod(dim(cafe_data))
print(total_cells)
missing_cells <- sum(is.na(cafe_data))
print(missing_cells)
# UPDATING THE DATA SET
#
# Now that we have all of our functions ready for our first 5 columns (ones
# that all needed some sort of calculation to fill in the NAs), we can update it
# here and then see how we can clean the last three columns' NAs.
#
# First I want to see the proportion of missing data by each column
total_cells <- prod(dim(cafe_data))
print(total_cells)
missing_cells <- sum(is.na(cafe_data))
print(missing_cells)
missing_proportion <- (missing_cells * 100)/(total_cells)
print(missing_proportion)
View(cafe_data)
View(cafe_data)
# Final % of missing data
missing_proportion_cleaned <- cafe_data_cleaned %>%
summarise(across(everything(), ~ mean(is.na(.))))
print(missing_proportion_cleaned)
# overall percentage missing
overall_missing_proportion_cleaned <- mean(is.na(cafe_data_cleaned))
print(overall_missing_proportion_cleaned) #1.3% of all data is missing. NICE!
# overall % missing
overall_missing_proportion_cleaned <- mean(is.na(cafe_data_cleaned))
print(overall_missing_proportion_cleaned) #1.3% of all data is missing. NICE!
# overall % missing
overall_missing_proportion <- mean(is.na(cafe_data))*100
print(overall_missing_proportion) #12.6% of all data is missing
# UPDATING THE DATA SET
#
# Now that we have all of our functions ready for our first 5 columns (ones
# that all needed some sort of calculation to fill in the NAs), we can update it
# here and then see how we can clean the last three columns' NAs.
#
# First I want to see the % of missing data by each column
missing_proportion <- cafe_data %>%
summarise(across(everything(), ~ mean(is.na(.))))*100
print(missing_proportion)
# calculate missing data by column
missing_proportion_cleaned <- cafe_data_cleaned %>%
summarise(across(everything(), ~ mean(is.na(.))))*100
print(missing_proportion_cleaned)
# overall percentage missing
overall_missing_proportion_cleaned <- mean(is.na(cafe_data_cleaned))*100
print(overall_missing_proportion_cleaned) #10.2% of all data is missing
# Load Packages
library(tidyverse)
# Read in Data and Label 'NAs' from directory
cafe_data <- read_csv("R/2025_03_01_Data_Cleaning_ProjectR/dirty_cafe_sales.csv",
na = c("", "ERROR", "UNKNOWN")) # our three types of NA data
# Renaming columns
cafe_data <- cafe_data %>%
rename(transaction_ID = `Transaction ID`,
price_per_unit = `Price Per Unit`,
total_spent = `Total Spent`,
payment_method = `Payment Method`,
transaction_date = `Transaction Date`) # adding underscore to column names
# Formatting columns
#
# In the data, it looks like only date needs to be formatted. Currently, it is
# formatted as a 'Character'. We can fix that using the mutate() and mdy() function.
cafe_data <- cafe_data %>%
mutate(transaction_date = mdy(transaction_date))
View(cafe_data)
##########################
# Cleaning Columns 1-by-1
##########################
#
# COLUMN 1: transaction_id
#
# All I want to do here is remove the "TXN_" and ensure this column stays as
# a character. To rename rows, use the mutate and str_replace function
cafe_data <- cafe_data %>%
mutate(transaction_ID = str_replace(transaction_ID, "TXN_", ""))
# COLUMN 2: Item
#
# First, I will check the levels of this column to see all types of items.
levels(factor(cafe_data$Item))
# 8 total types of items with no other variations. Based on the menu we were
# given from the original kaggle data set, I will input the missing items I
# can with the appropriate item. 4 items have the same prices, so I can only
# input the other 4 items (Coffee, Tea, Salad, and Cookie).
#
# I will make it into a function to update later at the end so that when other
# NA values are filled in, we can piece together this data puzzle.
item_update <- function(cafe_data) {
cafe_data %>%
mutate(Item = case_when(
is.na(Item) & price_per_unit == 2.0 ~ "Coffee",
is.na(Item) & price_per_unit == 1.5 ~ "Tea",
is.na(Item) & price_per_unit == 5.0 ~ "Salad",
is.na(Item) & price_per_unit == 1 ~ "Cookie",
TRUE ~ Item))
}
# COLUMN 3: Quantity
#
# lets look at the range of quantities of items
range(cafe_data$Quantity, na.rm=TRUE) #1-5
#
# Creating a function like the last column. This will be calculated by dividing
# total_spent by price_per_unit.
quant_update <- function(cafe_data) {
cafe_data %>%
mutate(Quantity = case_when(
is.na(Quantity) ~ total_spent / price_per_unit,
TRUE ~ Quantity))
}
# ppu function 1
ppu_update1 <- function(cafe_data) {
cafe_data <- cafe_data %>%
mutate(price_per_unit = case_when(
is.na(price_per_unit) ~ total_spent / Quantity,
TRUE ~ Quantity))
}
# ppu function 2
# some values in price_per_unit do not match the price from the menu. This will
# fix that for us while also filling in those NA values.
ppu_update2 <- function(cafe_data) {
cafe_data %>%
mutate(price_per_unit = case_when(
price_per_unit & Item == "Coffee" ~ 2.0,
price_per_unit & Item == "Tea" ~ 1.5,
price_per_unit & Item == "Sandwich" ~ 4.0,
price_per_unit & Item == "Salad" ~ 5.0,
price_per_unit & Item == "Cake" ~ 3.0,
price_per_unit & Item == "Cookie" ~ 1,
price_per_unit & Item == "Smoothie" ~ 4.0,
price_per_unit & Item == "Juice" ~ 3.0,
is.na(price_per_unit) & Item == "Coffee" ~ 2.0,
is.na(price_per_unit) & Item == "Tea" ~ 1.5,
is.na(price_per_unit) & Item == "Sandwich" ~ 4.0,
is.na(price_per_unit) & Item == "Salad" ~ 5.0,
is.na(price_per_unit) & Item == "Cake" ~ 3.0,
is.na(price_per_unit) & Item == "Cookie" ~ 1,
is.na(price_per_unit) & Item == "Smoothie" ~ 4.0,
is.na(price_per_unit) & Item == "Juice" ~ 3.0,
TRUE ~ Quantity))
}
totspent_update <- function(cafe_data) {
cafe_data %>%
mutate(total_spent = case_when(
is.na(total_spent) ~ Quantity * price_per_unit,
TRUE ~ total_spent))
}
# UPDATING THE DATA SET
#
# Now that we have all of our functions ready for our first 5 columns (ones
# that all needed some sort of calculation to fill in the NAs), we can update it
# here and then see how we can clean the last three columns' NAs.
#
# First I want to see the % of missing data by each column
missing_proportion <- cafe_data %>%
summarise(across(everything(), ~ mean(is.na(.))))*100
print(missing_proportion)
# overall % missing
overall_missing_proportion <- mean(is.na(cafe_data))*100
print(overall_missing_proportion) #12.6% of all data is missing
#
# we will add them in reverse order
cafe_data_cleaned <- cafe_data %>%
totspent_update() %>%
ppu_update2() %>%
ppu_update1() %>%
quant_update() %>%
item_update()
#
# looks like we can still fill in more missing data now that we have more info
cafe_data_cleaned <- cafe_data_cleaned %>%
ppu_update2() %>%
quant_update() %>%
totspent_update()
# calculate missing data by column
missing_proportion_cleaned <- cafe_data_cleaned %>%
summarise(across(everything(), ~ mean(is.na(.))))*100
print(missing_proportion_cleaned)
# overall percentage missing
overall_missing_proportion_cleaned <- mean(is.na(cafe_data_cleaned))*100
print(overall_missing_proportion_cleaned) #10.2% of all data is missing
# COLUMN 6
# 32% of payment_method data is missing. We will fill in the  NAs with 'Unknown'
cafe_data_cleaned <- cafe_data_cleaned %>%
mutate(payment_method = case_when(
is.na(payment_method) ~ 'Unknown',
TRUE ~ payment_method))
# COLUMN 7: Location
cafe_data_cleaned <- cafe_data_cleaned %>%
mutate(Location = case_when(
is.na(Location) ~ 'Unknown',
TRUE ~ Location))
# Final % of missing data by column
missing_proportion_cleaned <- cafe_data_cleaned %>%
summarise(across(everything(), ~ mean(is.na(.))))*100
print(missing_proportion_cleaned)
# overall % missing
overall_missing_proportion_cleaned <- mean(is.na(cafe_data_cleaned))*100
print(overall_missing_proportion_cleaned) #1.3% of all data is missing. NICE!
View(cafe_data_cleaned)
# Save New Cleaned Cafe Data
write.csv(cafe_data_cleaned, file = "cafe_data_cleaned.csv")
# Save New Cleaned Cafe Data
write.csv(cafe_data_cleaned, file = "R/2025_03_01_Data_Cleaning_ProjectR/cafe_data_cleaned.csv")
# Save New Cleaned Cafe Data
write.csv(cafe_data_cleaned, file = "R/2025_03_01_Data_Cleaning_ProjectR/cafe_sales_cleaned.csv")
###########################################
# Cafe Sales Data Cleaning
###########################################
# Load Required Packages
library(tidyverse)
# Read Data & Define Missing Values
cafe_data <- read_csv("R/2025_03_01_Data_Cleaning_ProjectR/dirty_cafe_sales.csv",
na = c("", "ERROR", "UNKNOWN"))
# Rename Columns (Standardizing Names)
cafe_data <- cafe_data %>%
rename(transaction_ID = `Transaction ID`,
price_per_unit = `Price Per Unit`,
total_spent = `Total Spent`,
payment_method = `Payment Method`,
transaction_date = `Transaction Date`)
# Convert Date Column to Proper Format
cafe_data <- cafe_data %>%
mutate(transaction_date = mdy(transaction_date))
###########################################
# Column-Wise Data Cleaning
###########################################
# 1. Clean `transaction_ID`
cafe_data <- cafe_data %>%
mutate(transaction_ID = str_replace(transaction_ID, "TXN_", ""))
# 2. Clean `Item` Column (Fill Missing Values Based on Prices)
item_update <- function(cafe_data) {
cafe_data %>%
mutate(Item = case_when(
is.na(Item) & price_per_unit == 2.0 ~ "Coffee",
is.na(Item) & price_per_unit == 1.5 ~ "Tea",
is.na(Item) & price_per_unit == 5.0 ~ "Salad",
is.na(Item) & price_per_unit == 1.0 ~ "Cookie",
TRUE ~ Item))
}
# 3. Clean `Quantity` (Fill Missing Values Using `total_spent` / `price_per_unit`)
quant_update <- function(cafe_data) {
cafe_data %>%
mutate(Quantity = case_when(
is.na(Quantity) ~ total_spent / price_per_unit,
TRUE ~ Quantity))
}
# 4. Clean `price_per_unit`
ppu_update1 <- function(cafe_data) {
cafe_data %>%
mutate(price_per_unit = case_when(
is.na(price_per_unit) ~ total_spent / Quantity,
TRUE ~ price_per_unit))
}
ppu_update2 <- function(cafe_data) {
cafe_data %>%
mutate(price_per_unit = case_when(
is.na(price_per_unit) & Item == "Coffee" ~ 2.0,
is.na(price_per_unit) & Item == "Tea" ~ 1.5,
is.na(price_per_unit) & Item == "Sandwich" ~ 4.0,
is.na(price_per_unit) & Item == "Salad" ~ 5.0,
is.na(price_per_unit) & Item == "Cake" ~ 3.0,
is.na(price_per_unit) & Item == "Cookie" ~ 1.0,
is.na(price_per_unit) & Item == "Smoothie" ~ 4.0,
is.na(price_per_unit) & Item == "Juice" ~ 3.0,
TRUE ~ price_per_unit))
}
# 5. Clean `total_spent` (Calculate from Quantity & Price Per Unit)
totspent_update <- function(cafe_data) {
cafe_data %>%
mutate(total_spent = case_when(
is.na(total_spent) ~ Quantity * price_per_unit,
TRUE ~ total_spent))
}
###########################################
# Apply Cleaning Functions
###########################################
cafe_data_cleaned <- cafe_data %>%
totspent_update() %>%
ppu_update2() %>%
ppu_update1() %>%
quant_update() %>%
item_update()
# Reapply to fill additional missing values
cafe_data_cleaned <- cafe_data_cleaned %>%
ppu_update2() %>%
quant_update() %>%
totspent_update()
###########################################
# Handle Categorical Columns
###########################################
# Fill Missing `payment_method` with 'Unknown'
cafe_data_cleaned <- cafe_data_cleaned %>%
mutate(payment_method = replace_na(payment_method, "Unknown"))
# Fill Missing `Location` with 'Unknown'
cafe_data_cleaned <- cafe_data_cleaned %>%
mutate(Location = replace_na(Location, "Unknown"))
# Leave `transaction_date` NAs as-is (Only 5% Missing)
###########################################
# Missing Data Summary
###########################################
# Calculate % Missing per Column
missing_proportion_cleaned <- cafe_data_cleaned %>%
summarise(across(everything(), ~ mean(is.na(.)) * 100))
print(missing_proportion_cleaned)
# Calculate Overall % Missing
overall_missing_proportion_cleaned <- mean(is.na(cafe_data_cleaned)) * 100
print(overall_missing_proportion_cleaned)  # ~1.3% Missing Data
# Save New Cleaned Cafe Data
write.csv(cafe_data_cleaned, file = "R/2025_03_01_Data_Cleaning_ProjectR/cafe_sales_cleaned.csv")
# Save Cleaned Cafe Data in Directory
writexl::write_xlsx(cafe_data_cleaned, file = "R/2025_03_01_Data_Cleaning_ProjectR/cafe_sales_cleaned.xlsx")
# Save Cleaned Cafe Data in Directory
install.packages("openxlsx")  # Install if you haven't
library(openxlsx)
write.xlsx(cafe_data_cleaned, "R/2025_03_01_Data_Cleaning_ProjectR/cafe_sales_cleaned.xlsx")
